import { createClient } from '@supabase/supabase-js';

// Supabase configuration
// TODO: Replace with your actual Supabase config
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-anon-key';

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Database table names
export const TABLES = {
  USERS: 'users',
  DRIVERS: 'drivers',
  RIDES: 'rides',
  PAYMENTS: 'payments',
  VEHICLES: 'vehicles',
  DRIVER_DOCUMENTS: 'driver_documents',
  RIDE_RATINGS: 'ride_ratings'
} as const;

// Database types (will be generated by Supabase CLI)
export interface User {
  id: string;
  email: string;
  full_name: string;
  phone: string;
  user_type: 'rider' | 'driver' | 'admin';
  profile_image_url?: string;
  created_at: string;
  updated_at: string;
}

export interface Driver {
  id: string;
  user_id: string;
  license_number: string;
  vehicle_id: string;
  is_verified: boolean;
  is_online: boolean;
  current_location?: {
    lat: number;
    lng: number;
  };
  rating: number;
  total_rides: number;
  created_at: string;
  updated_at: string;
}

export interface Ride {
  id: string;
  rider_id: string;
  driver_id?: string;
  pickup_location: {
    address: string;
    lat: number;
    lng: number;
  };
  dropoff_location: {
    address: string;
    lat: number;
    lng: number;
  };
  ride_type: 'standard' | 'comfort' | 'share';
  status: 'requested' | 'driver_assigned' | 'driver_arriving' | 'in_progress' | 'completed' | 'cancelled';
  fare: number;
  distance: number;
  duration: number;
  payment_method: 'cash' | 'snapscan' | 'payfast' | 'yoco' | 'other';
  payment_status: 'pending' | 'completed' | 'failed';
  created_at: string;
  updated_at: string;
}

export interface Vehicle {
  id: string;
  driver_id: string;
  make: string;
  model: string;
  year: number;
  license_plate: string;
  color: string;
  seats: number;
  created_at: string;
  updated_at: string;
}

export interface Payment {
  id: string;
  ride_id: string;
  amount: number;
  currency: string;
  payment_method: string;
  payment_status: 'pending' | 'completed' | 'failed' | 'refunded';
  transaction_id?: string;
  created_at: string;
  updated_at: string;
}

// Helper functions for database operations
export const dbHelpers = {
  // User operations
  async createUser(userData: Omit<User, 'id' | 'created_at' | 'updated_at'>) {
    const { data, error } = await supabase
      .from(TABLES.USERS)
      .insert([userData])
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async getUserById(id: string) {
    const { data, error } = await supabase
      .from(TABLES.USERS)
      .select('*')
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data;
  },

  async getUserByEmail(email: string) {
    const { data, error } = await supabase
      .from(TABLES.USERS)
      .select('*')
      .eq('email', email)
      .single();
    
    if (error) throw error;
    return data;
  },

  // Driver operations
  async createDriver(driverData: Omit<Driver, 'id' | 'created_at' | 'updated_at'>) {
    const { data, error } = await supabase
      .from(TABLES.DRIVERS)
      .insert([driverData])
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async getAvailableDrivers(location: { lat: number; lng: number }, radius = 10) {
    // This would use PostGIS for location-based queries in production
    const { data, error } = await supabase
      .from(TABLES.DRIVERS)
      .select('*, users(*), vehicles(*)')
      .eq('is_online', true)
      .eq('is_verified', true);
    
    if (error) throw error;
    return data;
  },

  // Ride operations
  async createRide(rideData: Omit<Ride, 'id' | 'created_at' | 'updated_at'>) {
    const { data, error } = await supabase
      .from(TABLES.RIDES)
      .insert([rideData])
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async updateRideStatus(rideId: string, status: Ride['status']) {
    const { data, error } = await supabase
      .from(TABLES.RIDES)
      .update({ status, updated_at: new Date().toISOString() })
      .eq('id', rideId)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async getRideById(id: string) {
    const { data, error } = await supabase
      .from(TABLES.RIDES)
      .select('*, users!rider_id(*), drivers!driver_id(*)')
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data;
  },

  // Real-time subscriptions
  subscribeToRideUpdates(rideId: string, callback: (payload: any) => void) {
    return supabase
      .channel(`ride-${rideId}`)
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: TABLES.RIDES,
          filter: `id=eq.${rideId}`,
        },
        callback
      )
      .subscribe();
  },

  subscribeToDriverLocation(driverId: string, callback: (payload: any) => void) {
    return supabase
      .channel(`driver-location-${driverId}`)
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: TABLES.DRIVERS,
          filter: `id=eq.${driverId}`,
        },
        callback
      )
      .subscribe();
  }
};

export default supabase;